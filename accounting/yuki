#!/usr/bin/env ruby
require './config/environment'

$debug = !!ARGV[4]

now   = Time.now
year  = ARGV[0].to_i
month = ARGV[1].to_i
day   = ARGV[2].to_i
days  = (ARGV[3] || 1).to_i

TEMPLATE = Tox.dsl do
  el('SalesInvoices',
    mel('SalesInvoice', {
      reference: el('Reference', text),
      subject: el('Subject', text),
      process: el('Process', text),
      date: el('Date', text),
      due_date: el('DueDate', text),
      contact_code: el('Contact', el('ContactCode', text)),
      lines: el('InvoiceLines', mel('InvoiceLine', {
        description: el('Description', text),
        quantity: el('ProductQuantity', text),
        product: el('Product', {
          description: el('Description', text),
          reference: el('Reference', text),
          category: el('Category', text),
          amount: el('SalesPrice', text),
          vat_rate: el('VATPercentage', text),
          vat_included: el('VATIncluded', text),
          vat_type: el('VATType', text),
          vat_description: el('VATDescription', text),
          account_code: el('GLAccountCode', text),
          remarks: el('Remarks', text)
        })
      }))
    })
  )
end

def vat_code(invoice)
  vat_code = if !invoice.eu?
    ['TRMExport outside the EU', '6']
  elsif invoice.customer_vat_number && invoice.eu? && invoice.customer_vat_number[0..1] != 'BE'
    ['TRMVAT reverse-charged', '17']
  elsif invoice.customer_country_code == 'BE'
    ['TRMVAT 21%', '1']
  else
    country_name = ISO3166::Country.new(invoice.customer_country_code).name
    ["MOSS #{country_name.upcase}", '8']
  end
end

def yuki_line(invoice)
  original_invoice = invoice.reference || invoice
  vat_desc, vat_type = vat_code(invoice)

  total = (invoice.total_eur.to_f / 100).round(2)

  total = -total if invoice.credit_note?

  {
    description: "#{invoice.number} - #{original_invoice.stripe_subscription_id}",
    quantity: '1',
    product: {
      description: 'invoice',
      reference: '',
      category: '13',
      amount: total.to_s,
      vat_rate: (invoice.vat_rate || 0).round(2).to_f.to_s,
      vat_included: 'true',
      vat_type: vat_type,
      vat_description: vat_desc,
      account_code: '8000',
      remarks: 'none'
    }
  }
end

def upload_day!(client, session_id, administration_id, date)
  year, month, day, yday = date.year, date.month, date.day, date.yday
  xml_date = '%d-%02d-%02d' % [year, month, day]

  invoices = Invoice.between(date, date + 1.day).order_by(:number)

 # Verify that all invoices have been processed and the EUR amount has been calculated
  unprocessed_invoices = invoices.where(total_eur: nil)
  abort(
    %{
      UNABLE TO EXPORT #{xml_date} (and later)!

      The following invoices have not been processed yet:
#{unprocessed_invoices.map{|i| "      - #{i.number}"}.join("\n")}

      Please wait until the job has run and retry the export…
    }
  ) if unprocessed_invoices.count > 0

  categories = {
    'M' => invoices.exclude(:credit_note).where(Sequel[interval:'month'] | Sequel[interval: nil]),
    'Y' => invoices.exclude(:credit_note).where(interval: 'year'),
    'C' => invoices.where(:credit_note)
  }.reject { |k, v| v.empty? }

  categories.each do |code, invoices|
    lines = invoices.map do |invoice|
      yuki_line(invoice)
    end

    xml = TEMPLATE.render([{
      reference: '%s%s%03d' % [code, year, yday],
      subject: 'Dagtotaal (%s) %02d/%02d/%d' % [code, day, month, year],
      process: 'true',
      date: xml_date,
      due_date: xml_date,
      contact_code: '1',
      lines: lines
    }])

    response = client.call(:process_sales_invoices, message: {
      'sessionId'        => session_id,
      'administrationId' => administration_id,
      "xmlDoc!"          => xml
    })

    result = response.body[:process_sales_invoices_response][:process_sales_invoices_result][:sales_invoices_import_response][:invoice]

    if result[:succeeded]
      puts "\033[32m✓\033[0m #{result[:subject]} succeeded"
    else
      puts "\033[31m✗\033[0m #{result[:subject]} failed: #{result[:message]}"
      puts xml if $debug
    end
  end
end

client = Savon.client(
  wsdl: 'https://api.yukiworks.nl/ws/Sales.asmx?wsdl'
)

session_id = client.call(:authenticate_by_user_name, message: {
  userName: ENV['YUKI_USERNAME'],
  password: ENV['YUKI_PASSWORD']
}).body[:authenticate_by_user_name_response][:authenticate_by_user_name_result]

administration_id = client.call(:administration_id, message: {
  sessionID: session_id,
  administrationName: ENV['YUKI_ADMINISTRATION']
}).body[:administration_id_response][:administration_id_result]

start = Date.new(year, month, day)

days.times.each do |i|
  upload_day!(client, session_id, administration_id, start + i.days)
end
